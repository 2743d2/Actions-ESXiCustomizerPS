name: ESXiCustomizerPS_Action

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

env:
  ECP_REPO_URL: https://github.com/VFrontDe/ESXi-Customizer-PS
  ECP_REPO_BRANCH: master

jobs:
  build:
    name: "Gen ESXi-installer Customized"
    runs-on: windows-latest

    steps:
      
      - name: Checkout
        uses: actions/checkout@v3.0.0
        
      - uses: actions/setup-python@v4
        with:
          python-version: '3.7'
      - run: pip install -r six psutil lxml pyopenssl

      - name: Config VMware.PowerCLI
        shell: pwsh
        run: |
          Set-ExecutionPolicy Unrestricted -force
          Get-ExecutionPolicy -List
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name VMware.PowerCLI

        # Set-PowerCLIConfiguration -InvalidCertificateAction Ignore
        # $ConfigFile = "${{ github.workspace }}/config.ps1"
        # powershell.exe -ExecutionPolicy Bypass $ConfigFile


      - name: Clone ECP Source Code
        shell: pwsh
        run: |
          cd ${{ github.workspace }}
          git clone ${{ env.ECP_REPO_URL }} -b ${{ env.ECP_REPO_BRANCH }} ECP

      - name: Export Customized ISO
        id: export
        shell: pwsh
        run: |
          cd ${{ github.workspace }}
          cd ECP
          $PSfile = "& ${{ github.workspace }}\Script.ps1"
          iex $PSfile
          echo "::set-output name=status::success"

      - name: Organize Files
        id: organize
        if: steps.export.outputs.status == 'success' && !cancelled()
        shell: pwsh
        run: |
          cd ${{ github.workspace }}
          cd ECP
          rm docs -r -fo
          rm ESXi-Customizer-PS.ps1 -r -fo
          echo "ISO_FILE=$PWD" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      # - name: Upload File
      #   uses: actions/upload-artifact@main
      #   if: steps.organize.outputs.status == 'success' && !cancelled()
      #   with: 
      #     name: ESXi-Customized-ISO_${{ env.FILE_DATE }}
      #     path: ${{ env.ISO_FILE }}/*.iso

      - name: Generate Release Tag
        id: tag
        if: steps.organize.outputs.status == 'success' && !cancelled()
        shell: pwsh
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          echo "::set-output name=status::success"

      - name: Upload ISO File to Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.ISO_FILE }}\*
